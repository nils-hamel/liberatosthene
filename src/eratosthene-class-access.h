/*
 *  liberatosthene
 *
 *      Nils Hamel - nils.hamel@bluewin.ch
 *      Copyright (c) 2016-2020 DHLAB, EPFL
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

    /*! \file   eratosthene-class-access.h
     *  \author Nils Hamel <nils.hamel@bluewin.ch>
     *
     *  liberatosthene - class access
     */

/*
    header - inclusion guard
 */

    # ifndef __LE_CLASS_ACCESS__
    # define __LE_CLASS_ACCESS__

/*
    header - C/C++ compatibility
 */

    # ifdef __cplusplus
    extern "C" {
    # endif

/*
    header - internal includes
 */

/*
    header - external includes
 */

/*
    header - preprocessor definitions
 */

    /* define class null reference */
    # define LE_CLASS_NULL ( 0xff )

    /* define configuration length */
    # define LE_CLASS_ACCESS_SIZE { \
    0x00, 0x01, 0x01, 0x02, 0x01, 0x02, 0x02, 0x03, \
    0x01, 0x02, 0x02, 0x03, 0x02, 0x03, 0x03, 0x04, \
    0x01, 0x02, 0x02, 0x03, 0x02, 0x03, 0x03, 0x04, \
    0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, \
    0x01, 0x02, 0x02, 0x03, 0x02, 0x03, 0x03, 0x04, \
    0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, \
    0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, \
    0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, \
    0x01, 0x02, 0x02, 0x03, 0x02, 0x03, 0x03, 0x04, \
    0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, \
    0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, \
    0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, \
    0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, \
    0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, \
    0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, \
    0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, \
    0x01, 0x02, 0x02, 0x03, 0x02, 0x03, 0x03, 0x04, \
    0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, \
    0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, \
    0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, \
    0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, \
    0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, \
    0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, \
    0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, \
    0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, \
    0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, \
    0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, \
    0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, \
    0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, \
    0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, \
    0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, \
    0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08  \
    }

    /* define configuration direct access */
    # define LE_CLASS_ACCESS_DIRECT { \
    { \
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0xff, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0xff, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0xff, 0x00, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0xff, 0x02, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0xff, 0xff, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0xff, 0x01, 0x02, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0xff, 0x00, 0x01, 0x02, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x03, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0xff, 0xff, 0xff, 0x01, 0xff, 0xff, 0xff \
    }, { \
    0xff, 0x00, 0xff, 0xff, 0x01, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0xff, 0xff, 0x02, 0xff, 0xff, 0xff \
    }, { \
    0xff, 0xff, 0x00, 0xff, 0x01, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0xff, 0x01, 0xff, 0x02, 0xff, 0xff, 0xff \
    }, { \
    0xff, 0x00, 0x01, 0xff, 0x02, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0xff, 0x03, 0xff, 0xff, 0xff \
    }, { \
    0xff, 0xff, 0xff, 0x00, 0x01, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0xff, 0xff, 0x01, 0x02, 0xff, 0xff, 0xff \
    }, { \
    0xff, 0x00, 0xff, 0x01, 0x02, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0xff, 0x02, 0x03, 0xff, 0xff, 0xff \
    }, { \
    0xff, 0xff, 0x00, 0x01, 0x02, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0xff, 0x01, 0x02, 0x03, 0xff, 0xff, 0xff \
    }, { \
    0xff, 0x00, 0x01, 0x02, 0x03, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x03, 0x04, 0xff, 0xff, 0xff \
    }, { \
    0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff \
    }, { \
    0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0xff, 0xff \
    }, { \
    0xff, 0x00, 0xff, 0xff, 0xff, 0x01, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0xff, 0xff, 0xff, 0x02, 0xff, 0xff \
    }, { \
    0xff, 0xff, 0x00, 0xff, 0xff, 0x01, 0xff, 0xff \
    }, { \
    0x00, 0xff, 0x01, 0xff, 0xff, 0x02, 0xff, 0xff \
    }, { \
    0xff, 0x00, 0x01, 0xff, 0xff, 0x02, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0xff, 0xff, 0x03, 0xff, 0xff \
    }, { \
    0xff, 0xff, 0xff, 0x00, 0xff, 0x01, 0xff, 0xff \
    }, { \
    0x00, 0xff, 0xff, 0x01, 0xff, 0x02, 0xff, 0xff \
    }, { \
    0xff, 0x00, 0xff, 0x01, 0xff, 0x02, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0xff, 0x02, 0xff, 0x03, 0xff, 0xff \
    }, { \
    0xff, 0xff, 0x00, 0x01, 0xff, 0x02, 0xff, 0xff \
    }, { \
    0x00, 0xff, 0x01, 0x02, 0xff, 0x03, 0xff, 0xff \
    }, { \
    0xff, 0x00, 0x01, 0x02, 0xff, 0x03, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x03, 0xff, 0x04, 0xff, 0xff \
    }, { \
    0xff, 0xff, 0xff, 0xff, 0x00, 0x01, 0xff, 0xff \
    }, { \
    0x00, 0xff, 0xff, 0xff, 0x01, 0x02, 0xff, 0xff \
    }, { \
    0xff, 0x00, 0xff, 0xff, 0x01, 0x02, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0xff, 0xff, 0x02, 0x03, 0xff, 0xff \
    }, { \
    0xff, 0xff, 0x00, 0xff, 0x01, 0x02, 0xff, 0xff \
    }, { \
    0x00, 0xff, 0x01, 0xff, 0x02, 0x03, 0xff, 0xff \
    }, { \
    0xff, 0x00, 0x01, 0xff, 0x02, 0x03, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0xff, 0x03, 0x04, 0xff, 0xff \
    }, { \
    0xff, 0xff, 0xff, 0x00, 0x01, 0x02, 0xff, 0xff \
    }, { \
    0x00, 0xff, 0xff, 0x01, 0x02, 0x03, 0xff, 0xff \
    }, { \
    0xff, 0x00, 0xff, 0x01, 0x02, 0x03, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0xff, 0x02, 0x03, 0x04, 0xff, 0xff \
    }, { \
    0xff, 0xff, 0x00, 0x01, 0x02, 0x03, 0xff, 0xff \
    }, { \
    0x00, 0xff, 0x01, 0x02, 0x03, 0x04, 0xff, 0xff \
    }, { \
    0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0xff, 0xff \
    }, { \
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff \
    }, { \
    0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0xff \
    }, { \
    0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0xff \
    }, { \
    0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0x02, 0xff \
    }, { \
    0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x01, 0xff \
    }, { \
    0x00, 0xff, 0x01, 0xff, 0xff, 0xff, 0x02, 0xff \
    }, { \
    0xff, 0x00, 0x01, 0xff, 0xff, 0xff, 0x02, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0xff, 0xff, 0xff, 0x03, 0xff \
    }, { \
    0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0x01, 0xff \
    }, { \
    0x00, 0xff, 0xff, 0x01, 0xff, 0xff, 0x02, 0xff \
    }, { \
    0xff, 0x00, 0xff, 0x01, 0xff, 0xff, 0x02, 0xff \
    }, { \
    0x00, 0x01, 0xff, 0x02, 0xff, 0xff, 0x03, 0xff \
    }, { \
    0xff, 0xff, 0x00, 0x01, 0xff, 0xff, 0x02, 0xff \
    }, { \
    0x00, 0xff, 0x01, 0x02, 0xff, 0xff, 0x03, 0xff \
    }, { \
    0xff, 0x00, 0x01, 0x02, 0xff, 0xff, 0x03, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x03, 0xff, 0xff, 0x04, 0xff \
    }, { \
    0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x01, 0xff \
    }, { \
    0x00, 0xff, 0xff, 0xff, 0x01, 0xff, 0x02, 0xff \
    }, { \
    0xff, 0x00, 0xff, 0xff, 0x01, 0xff, 0x02, 0xff \
    }, { \
    0x00, 0x01, 0xff, 0xff, 0x02, 0xff, 0x03, 0xff \
    }, { \
    0xff, 0xff, 0x00, 0xff, 0x01, 0xff, 0x02, 0xff \
    }, { \
    0x00, 0xff, 0x01, 0xff, 0x02, 0xff, 0x03, 0xff \
    }, { \
    0xff, 0x00, 0x01, 0xff, 0x02, 0xff, 0x03, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0xff, 0x03, 0xff, 0x04, 0xff \
    }, { \
    0xff, 0xff, 0xff, 0x00, 0x01, 0xff, 0x02, 0xff \
    }, { \
    0x00, 0xff, 0xff, 0x01, 0x02, 0xff, 0x03, 0xff \
    }, { \
    0xff, 0x00, 0xff, 0x01, 0x02, 0xff, 0x03, 0xff \
    }, { \
    0x00, 0x01, 0xff, 0x02, 0x03, 0xff, 0x04, 0xff \
    }, { \
    0xff, 0xff, 0x00, 0x01, 0x02, 0xff, 0x03, 0xff \
    }, { \
    0x00, 0xff, 0x01, 0x02, 0x03, 0xff, 0x04, 0xff \
    }, { \
    0xff, 0x00, 0x01, 0x02, 0x03, 0xff, 0x04, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x03, 0x04, 0xff, 0x05, 0xff \
    }, { \
    0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x01, 0xff \
    }, { \
    0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0xff \
    }, { \
    0xff, 0x00, 0xff, 0xff, 0xff, 0x01, 0x02, 0xff \
    }, { \
    0x00, 0x01, 0xff, 0xff, 0xff, 0x02, 0x03, 0xff \
    }, { \
    0xff, 0xff, 0x00, 0xff, 0xff, 0x01, 0x02, 0xff \
    }, { \
    0x00, 0xff, 0x01, 0xff, 0xff, 0x02, 0x03, 0xff \
    }, { \
    0xff, 0x00, 0x01, 0xff, 0xff, 0x02, 0x03, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0xff, 0xff, 0x03, 0x04, 0xff \
    }, { \
    0xff, 0xff, 0xff, 0x00, 0xff, 0x01, 0x02, 0xff \
    }, { \
    0x00, 0xff, 0xff, 0x01, 0xff, 0x02, 0x03, 0xff \
    }, { \
    0xff, 0x00, 0xff, 0x01, 0xff, 0x02, 0x03, 0xff \
    }, { \
    0x00, 0x01, 0xff, 0x02, 0xff, 0x03, 0x04, 0xff \
    }, { \
    0xff, 0xff, 0x00, 0x01, 0xff, 0x02, 0x03, 0xff \
    }, { \
    0x00, 0xff, 0x01, 0x02, 0xff, 0x03, 0x04, 0xff \
    }, { \
    0xff, 0x00, 0x01, 0x02, 0xff, 0x03, 0x04, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x03, 0xff, 0x04, 0x05, 0xff \
    }, { \
    0xff, 0xff, 0xff, 0xff, 0x00, 0x01, 0x02, 0xff \
    }, { \
    0x00, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0xff \
    }, { \
    0xff, 0x00, 0xff, 0xff, 0x01, 0x02, 0x03, 0xff \
    }, { \
    0x00, 0x01, 0xff, 0xff, 0x02, 0x03, 0x04, 0xff \
    }, { \
    0xff, 0xff, 0x00, 0xff, 0x01, 0x02, 0x03, 0xff \
    }, { \
    0x00, 0xff, 0x01, 0xff, 0x02, 0x03, 0x04, 0xff \
    }, { \
    0xff, 0x00, 0x01, 0xff, 0x02, 0x03, 0x04, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0xff, 0x03, 0x04, 0x05, 0xff \
    }, { \
    0xff, 0xff, 0xff, 0x00, 0x01, 0x02, 0x03, 0xff \
    }, { \
    0x00, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04, 0xff \
    }, { \
    0xff, 0x00, 0xff, 0x01, 0x02, 0x03, 0x04, 0xff \
    }, { \
    0x00, 0x01, 0xff, 0x02, 0x03, 0x04, 0x05, 0xff \
    }, { \
    0xff, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0xff \
    }, { \
    0x00, 0xff, 0x01, 0x02, 0x03, 0x04, 0x05, 0xff \
    }, { \
    0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0xff \
    }, { \
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00 \
    }, { \
    0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01 \
    }, { \
    0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01 \
    }, { \
    0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02 \
    }, { \
    0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01 \
    }, { \
    0x00, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff, 0x02 \
    }, { \
    0xff, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0x02 \
    }, { \
    0x00, 0x01, 0x02, 0xff, 0xff, 0xff, 0xff, 0x03 \
    }, { \
    0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x01 \
    }, { \
    0x00, 0xff, 0xff, 0x01, 0xff, 0xff, 0xff, 0x02 \
    }, { \
    0xff, 0x00, 0xff, 0x01, 0xff, 0xff, 0xff, 0x02 \
    }, { \
    0x00, 0x01, 0xff, 0x02, 0xff, 0xff, 0xff, 0x03 \
    }, { \
    0xff, 0xff, 0x00, 0x01, 0xff, 0xff, 0xff, 0x02 \
    }, { \
    0x00, 0xff, 0x01, 0x02, 0xff, 0xff, 0xff, 0x03 \
    }, { \
    0xff, 0x00, 0x01, 0x02, 0xff, 0xff, 0xff, 0x03 \
    }, { \
    0x00, 0x01, 0x02, 0x03, 0xff, 0xff, 0xff, 0x04 \
    }, { \
    0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0x01 \
    }, { \
    0x00, 0xff, 0xff, 0xff, 0x01, 0xff, 0xff, 0x02 \
    }, { \
    0xff, 0x00, 0xff, 0xff, 0x01, 0xff, 0xff, 0x02 \
    }, { \
    0x00, 0x01, 0xff, 0xff, 0x02, 0xff, 0xff, 0x03 \
    }, { \
    0xff, 0xff, 0x00, 0xff, 0x01, 0xff, 0xff, 0x02 \
    }, { \
    0x00, 0xff, 0x01, 0xff, 0x02, 0xff, 0xff, 0x03 \
    }, { \
    0xff, 0x00, 0x01, 0xff, 0x02, 0xff, 0xff, 0x03 \
    }, { \
    0x00, 0x01, 0x02, 0xff, 0x03, 0xff, 0xff, 0x04 \
    }, { \
    0xff, 0xff, 0xff, 0x00, 0x01, 0xff, 0xff, 0x02 \
    }, { \
    0x00, 0xff, 0xff, 0x01, 0x02, 0xff, 0xff, 0x03 \
    }, { \
    0xff, 0x00, 0xff, 0x01, 0x02, 0xff, 0xff, 0x03 \
    }, { \
    0x00, 0x01, 0xff, 0x02, 0x03, 0xff, 0xff, 0x04 \
    }, { \
    0xff, 0xff, 0x00, 0x01, 0x02, 0xff, 0xff, 0x03 \
    }, { \
    0x00, 0xff, 0x01, 0x02, 0x03, 0xff, 0xff, 0x04 \
    }, { \
    0xff, 0x00, 0x01, 0x02, 0x03, 0xff, 0xff, 0x04 \
    }, { \
    0x00, 0x01, 0x02, 0x03, 0x04, 0xff, 0xff, 0x05 \
    }, { \
    0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x01 \
    }, { \
    0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0xff, 0x02 \
    }, { \
    0xff, 0x00, 0xff, 0xff, 0xff, 0x01, 0xff, 0x02 \
    }, { \
    0x00, 0x01, 0xff, 0xff, 0xff, 0x02, 0xff, 0x03 \
    }, { \
    0xff, 0xff, 0x00, 0xff, 0xff, 0x01, 0xff, 0x02 \
    }, { \
    0x00, 0xff, 0x01, 0xff, 0xff, 0x02, 0xff, 0x03 \
    }, { \
    0xff, 0x00, 0x01, 0xff, 0xff, 0x02, 0xff, 0x03 \
    }, { \
    0x00, 0x01, 0x02, 0xff, 0xff, 0x03, 0xff, 0x04 \
    }, { \
    0xff, 0xff, 0xff, 0x00, 0xff, 0x01, 0xff, 0x02 \
    }, { \
    0x00, 0xff, 0xff, 0x01, 0xff, 0x02, 0xff, 0x03 \
    }, { \
    0xff, 0x00, 0xff, 0x01, 0xff, 0x02, 0xff, 0x03 \
    }, { \
    0x00, 0x01, 0xff, 0x02, 0xff, 0x03, 0xff, 0x04 \
    }, { \
    0xff, 0xff, 0x00, 0x01, 0xff, 0x02, 0xff, 0x03 \
    }, { \
    0x00, 0xff, 0x01, 0x02, 0xff, 0x03, 0xff, 0x04 \
    }, { \
    0xff, 0x00, 0x01, 0x02, 0xff, 0x03, 0xff, 0x04 \
    }, { \
    0x00, 0x01, 0x02, 0x03, 0xff, 0x04, 0xff, 0x05 \
    }, { \
    0xff, 0xff, 0xff, 0xff, 0x00, 0x01, 0xff, 0x02 \
    }, { \
    0x00, 0xff, 0xff, 0xff, 0x01, 0x02, 0xff, 0x03 \
    }, { \
    0xff, 0x00, 0xff, 0xff, 0x01, 0x02, 0xff, 0x03 \
    }, { \
    0x00, 0x01, 0xff, 0xff, 0x02, 0x03, 0xff, 0x04 \
    }, { \
    0xff, 0xff, 0x00, 0xff, 0x01, 0x02, 0xff, 0x03 \
    }, { \
    0x00, 0xff, 0x01, 0xff, 0x02, 0x03, 0xff, 0x04 \
    }, { \
    0xff, 0x00, 0x01, 0xff, 0x02, 0x03, 0xff, 0x04 \
    }, { \
    0x00, 0x01, 0x02, 0xff, 0x03, 0x04, 0xff, 0x05 \
    }, { \
    0xff, 0xff, 0xff, 0x00, 0x01, 0x02, 0xff, 0x03 \
    }, { \
    0x00, 0xff, 0xff, 0x01, 0x02, 0x03, 0xff, 0x04 \
    }, { \
    0xff, 0x00, 0xff, 0x01, 0x02, 0x03, 0xff, 0x04 \
    }, { \
    0x00, 0x01, 0xff, 0x02, 0x03, 0x04, 0xff, 0x05 \
    }, { \
    0xff, 0xff, 0x00, 0x01, 0x02, 0x03, 0xff, 0x04 \
    }, { \
    0x00, 0xff, 0x01, 0x02, 0x03, 0x04, 0xff, 0x05 \
    }, { \
    0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0xff, 0x05 \
    }, { \
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0xff, 0x06 \
    }, { \
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x01 \
    }, { \
    0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02 \
    }, { \
    0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02 \
    }, { \
    0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0x02, 0x03 \
    }, { \
    0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x01, 0x02 \
    }, { \
    0x00, 0xff, 0x01, 0xff, 0xff, 0xff, 0x02, 0x03 \
    }, { \
    0xff, 0x00, 0x01, 0xff, 0xff, 0xff, 0x02, 0x03 \
    }, { \
    0x00, 0x01, 0x02, 0xff, 0xff, 0xff, 0x03, 0x04 \
    }, { \
    0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0x01, 0x02 \
    }, { \
    0x00, 0xff, 0xff, 0x01, 0xff, 0xff, 0x02, 0x03 \
    }, { \
    0xff, 0x00, 0xff, 0x01, 0xff, 0xff, 0x02, 0x03 \
    }, { \
    0x00, 0x01, 0xff, 0x02, 0xff, 0xff, 0x03, 0x04 \
    }, { \
    0xff, 0xff, 0x00, 0x01, 0xff, 0xff, 0x02, 0x03 \
    }, { \
    0x00, 0xff, 0x01, 0x02, 0xff, 0xff, 0x03, 0x04 \
    }, { \
    0xff, 0x00, 0x01, 0x02, 0xff, 0xff, 0x03, 0x04 \
    }, { \
    0x00, 0x01, 0x02, 0x03, 0xff, 0xff, 0x04, 0x05 \
    }, { \
    0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x01, 0x02 \
    }, { \
    0x00, 0xff, 0xff, 0xff, 0x01, 0xff, 0x02, 0x03 \
    }, { \
    0xff, 0x00, 0xff, 0xff, 0x01, 0xff, 0x02, 0x03 \
    }, { \
    0x00, 0x01, 0xff, 0xff, 0x02, 0xff, 0x03, 0x04 \
    }, { \
    0xff, 0xff, 0x00, 0xff, 0x01, 0xff, 0x02, 0x03 \
    }, { \
    0x00, 0xff, 0x01, 0xff, 0x02, 0xff, 0x03, 0x04 \
    }, { \
    0xff, 0x00, 0x01, 0xff, 0x02, 0xff, 0x03, 0x04 \
    }, { \
    0x00, 0x01, 0x02, 0xff, 0x03, 0xff, 0x04, 0x05 \
    }, { \
    0xff, 0xff, 0xff, 0x00, 0x01, 0xff, 0x02, 0x03 \
    }, { \
    0x00, 0xff, 0xff, 0x01, 0x02, 0xff, 0x03, 0x04 \
    }, { \
    0xff, 0x00, 0xff, 0x01, 0x02, 0xff, 0x03, 0x04 \
    }, { \
    0x00, 0x01, 0xff, 0x02, 0x03, 0xff, 0x04, 0x05 \
    }, { \
    0xff, 0xff, 0x00, 0x01, 0x02, 0xff, 0x03, 0x04 \
    }, { \
    0x00, 0xff, 0x01, 0x02, 0x03, 0xff, 0x04, 0x05 \
    }, { \
    0xff, 0x00, 0x01, 0x02, 0x03, 0xff, 0x04, 0x05 \
    }, { \
    0x00, 0x01, 0x02, 0x03, 0x04, 0xff, 0x05, 0x06 \
    }, { \
    0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x01, 0x02 \
    }, { \
    0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03 \
    }, { \
    0xff, 0x00, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03 \
    }, { \
    0x00, 0x01, 0xff, 0xff, 0xff, 0x02, 0x03, 0x04 \
    }, { \
    0xff, 0xff, 0x00, 0xff, 0xff, 0x01, 0x02, 0x03 \
    }, { \
    0x00, 0xff, 0x01, 0xff, 0xff, 0x02, 0x03, 0x04 \
    }, { \
    0xff, 0x00, 0x01, 0xff, 0xff, 0x02, 0x03, 0x04 \
    }, { \
    0x00, 0x01, 0x02, 0xff, 0xff, 0x03, 0x04, 0x05 \
    }, { \
    0xff, 0xff, 0xff, 0x00, 0xff, 0x01, 0x02, 0x03 \
    }, { \
    0x00, 0xff, 0xff, 0x01, 0xff, 0x02, 0x03, 0x04 \
    }, { \
    0xff, 0x00, 0xff, 0x01, 0xff, 0x02, 0x03, 0x04 \
    }, { \
    0x00, 0x01, 0xff, 0x02, 0xff, 0x03, 0x04, 0x05 \
    }, { \
    0xff, 0xff, 0x00, 0x01, 0xff, 0x02, 0x03, 0x04 \
    }, { \
    0x00, 0xff, 0x01, 0x02, 0xff, 0x03, 0x04, 0x05 \
    }, { \
    0xff, 0x00, 0x01, 0x02, 0xff, 0x03, 0x04, 0x05 \
    }, { \
    0x00, 0x01, 0x02, 0x03, 0xff, 0x04, 0x05, 0x06 \
    }, { \
    0xff, 0xff, 0xff, 0xff, 0x00, 0x01, 0x02, 0x03 \
    }, { \
    0x00, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04 \
    }, { \
    0xff, 0x00, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04 \
    }, { \
    0x00, 0x01, 0xff, 0xff, 0x02, 0x03, 0x04, 0x05 \
    }, { \
    0xff, 0xff, 0x00, 0xff, 0x01, 0x02, 0x03, 0x04 \
    }, { \
    0x00, 0xff, 0x01, 0xff, 0x02, 0x03, 0x04, 0x05 \
    }, { \
    0xff, 0x00, 0x01, 0xff, 0x02, 0x03, 0x04, 0x05 \
    }, { \
    0x00, 0x01, 0x02, 0xff, 0x03, 0x04, 0x05, 0x06 \
    }, { \
    0xff, 0xff, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04 \
    }, { \
    0x00, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04, 0x05 \
    }, { \
    0xff, 0x00, 0xff, 0x01, 0x02, 0x03, 0x04, 0x05 \
    }, { \
    0x00, 0x01, 0xff, 0x02, 0x03, 0x04, 0x05, 0x06 \
    }, { \
    0xff, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05 \
    }, { \
    0x00, 0xff, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06 \
    }, { \
    0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06 \
    }, { \
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 \
    } \
    }

    /* define configuration direct and fast access */
    # define LE_CLASS_ACCESS_FAST { \
    { \
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0xff, 0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, 0xff \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, 0xff \
    }, { \
    0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, 0xff \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, 0xff \
    }, { \
    0xff, 0xff, 0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff \
    }, { \
    0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff \
    }, { \
    0xff, 0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff \
    }, { \
    0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff \
    }, { \
    0xff, 0xff, 0xff, 0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff \
    }, { \
    0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff \
    }, { \
    0xff, 0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff \
    }, { \
    0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff \
    }, { \
    0xff, 0xff, 0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff \
    }, { \
    0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff \
    }, { \
    0xff, 0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff \
    }, { \
    0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff \
    }, { \
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, 0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0xff, 0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0xff, 0xff, 0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0xff, 0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0xff, 0xff, 0xff, 0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0xff, 0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0xff, 0xff, 0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0xff, 0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x06 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff \
    }, { \
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, 0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, 0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, 0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, 0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, 0xff, 0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, 0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, 0xff, 0xff, 0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, 0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, 0xff, 0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, 0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x06 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, 0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, 0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, 0xff, 0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, 0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x06 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, 0xff, 0xff, 0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, 0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x06 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, 0xff, 0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x06 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, 0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, 0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x06 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, 0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0xff, \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x06 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0xff, \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x06 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    }, { \
    0x00 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x01 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x02 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x03 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x04 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x05 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x06 * _LE_USE_OFFSET + sizeof( le_byte_t ), \
    0x07 * _LE_USE_OFFSET + sizeof( le_byte_t ) \
    } \
    }

    /* define configuration invert access */
    # define LE_CLASS_ACCESS_INVERT { \
    { \
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x02, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x02, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x02, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x02, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x02, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x02, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x03, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x04, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x04, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x04, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x04, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x02, 0x04, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x02, 0x04, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x02, 0x04, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x04, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x03, 0x04, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x03, 0x04, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x03, 0x04, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x03, 0x04, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x02, 0x03, 0x04, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x02, 0x03, 0x04, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x02, 0x03, 0x04, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x03, 0x04, 0xff, 0xff, 0xff \
    }, { \
    0x05, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x05, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x05, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x05, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x02, 0x05, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x02, 0x05, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x02, 0x05, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x05, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x03, 0x05, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x03, 0x05, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x03, 0x05, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x03, 0x05, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x02, 0x03, 0x05, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x02, 0x03, 0x05, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x02, 0x03, 0x05, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x03, 0x05, 0xff, 0xff, 0xff \
    }, { \
    0x04, 0x05, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x04, 0x05, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x04, 0x05, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x04, 0x05, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x02, 0x04, 0x05, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x02, 0x04, 0x05, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x02, 0x04, 0x05, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x04, 0x05, 0xff, 0xff, 0xff \
    }, { \
    0x03, 0x04, 0x05, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x03, 0x04, 0x05, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x03, 0x04, 0x05, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x03, 0x04, 0x05, 0xff, 0xff, 0xff \
    }, { \
    0x02, 0x03, 0x04, 0x05, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x02, 0x03, 0x04, 0x05, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x02, 0x03, 0x04, 0x05, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0xff, 0xff \
    }, { \
    0x06, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x06, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x06, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x06, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x02, 0x06, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x02, 0x06, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x02, 0x06, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x06, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x03, 0x06, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x03, 0x06, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x03, 0x06, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x03, 0x06, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x02, 0x03, 0x06, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x02, 0x03, 0x06, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x02, 0x03, 0x06, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x03, 0x06, 0xff, 0xff, 0xff \
    }, { \
    0x04, 0x06, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x04, 0x06, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x04, 0x06, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x04, 0x06, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x02, 0x04, 0x06, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x02, 0x04, 0x06, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x02, 0x04, 0x06, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x04, 0x06, 0xff, 0xff, 0xff \
    }, { \
    0x03, 0x04, 0x06, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x03, 0x04, 0x06, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x03, 0x04, 0x06, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x03, 0x04, 0x06, 0xff, 0xff, 0xff \
    }, { \
    0x02, 0x03, 0x04, 0x06, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x02, 0x03, 0x04, 0x06, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x02, 0x03, 0x04, 0x06, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x03, 0x04, 0x06, 0xff, 0xff \
    }, { \
    0x05, 0x06, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x05, 0x06, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x05, 0x06, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x05, 0x06, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x02, 0x05, 0x06, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x02, 0x05, 0x06, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x02, 0x05, 0x06, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x05, 0x06, 0xff, 0xff, 0xff \
    }, { \
    0x03, 0x05, 0x06, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x03, 0x05, 0x06, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x03, 0x05, 0x06, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x03, 0x05, 0x06, 0xff, 0xff, 0xff \
    }, { \
    0x02, 0x03, 0x05, 0x06, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x02, 0x03, 0x05, 0x06, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x02, 0x03, 0x05, 0x06, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x03, 0x05, 0x06, 0xff, 0xff \
    }, { \
    0x04, 0x05, 0x06, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x04, 0x05, 0x06, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x04, 0x05, 0x06, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x04, 0x05, 0x06, 0xff, 0xff, 0xff \
    }, { \
    0x02, 0x04, 0x05, 0x06, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x02, 0x04, 0x05, 0x06, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x02, 0x04, 0x05, 0x06, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x04, 0x05, 0x06, 0xff, 0xff \
    }, { \
    0x03, 0x04, 0x05, 0x06, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x03, 0x04, 0x05, 0x06, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x03, 0x04, 0x05, 0x06, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x03, 0x04, 0x05, 0x06, 0xff, 0xff \
    }, { \
    0x02, 0x03, 0x04, 0x05, 0x06, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x02, 0x03, 0x04, 0x05, 0x06, 0xff, 0xff \
    }, { \
    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0xff \
    }, { \
    0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x02, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x02, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x02, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x03, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x03, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x03, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x03, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x02, 0x03, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x02, 0x03, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x02, 0x03, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x03, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x04, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x04, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x04, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x04, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x02, 0x04, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x02, 0x04, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x02, 0x04, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x04, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x03, 0x04, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x03, 0x04, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x03, 0x04, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x03, 0x04, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x02, 0x03, 0x04, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x02, 0x03, 0x04, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x02, 0x03, 0x04, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x03, 0x04, 0x07, 0xff, 0xff \
    }, { \
    0x05, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x05, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x05, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x05, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x02, 0x05, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x02, 0x05, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x02, 0x05, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x05, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x03, 0x05, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x03, 0x05, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x03, 0x05, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x03, 0x05, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x02, 0x03, 0x05, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x02, 0x03, 0x05, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x02, 0x03, 0x05, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x03, 0x05, 0x07, 0xff, 0xff \
    }, { \
    0x04, 0x05, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x04, 0x05, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x04, 0x05, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x04, 0x05, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x02, 0x04, 0x05, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x02, 0x04, 0x05, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x02, 0x04, 0x05, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x04, 0x05, 0x07, 0xff, 0xff \
    }, { \
    0x03, 0x04, 0x05, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x03, 0x04, 0x05, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x03, 0x04, 0x05, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x03, 0x04, 0x05, 0x07, 0xff, 0xff \
    }, { \
    0x02, 0x03, 0x04, 0x05, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x02, 0x03, 0x04, 0x05, 0x07, 0xff, 0xff \
    }, { \
    0x01, 0x02, 0x03, 0x04, 0x05, 0x07, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x07, 0xff \
    }, { \
    0x06, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x02, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x02, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x02, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x06, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x03, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x03, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x03, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x03, 0x06, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x02, 0x03, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x02, 0x03, 0x06, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x02, 0x03, 0x06, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x03, 0x06, 0x07, 0xff, 0xff \
    }, { \
    0x04, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x04, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x04, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x04, 0x06, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x02, 0x04, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x02, 0x04, 0x06, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x02, 0x04, 0x06, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x04, 0x06, 0x07, 0xff, 0xff \
    }, { \
    0x03, 0x04, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x03, 0x04, 0x06, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x03, 0x04, 0x06, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x03, 0x04, 0x06, 0x07, 0xff, 0xff \
    }, { \
    0x02, 0x03, 0x04, 0x06, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x02, 0x03, 0x04, 0x06, 0x07, 0xff, 0xff \
    }, { \
    0x01, 0x02, 0x03, 0x04, 0x06, 0x07, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x03, 0x04, 0x06, 0x07, 0xff \
    }, { \
    0x05, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x05, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x05, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x05, 0x06, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x02, 0x05, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x02, 0x05, 0x06, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x02, 0x05, 0x06, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x05, 0x06, 0x07, 0xff, 0xff \
    }, { \
    0x03, 0x05, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x03, 0x05, 0x06, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x03, 0x05, 0x06, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x03, 0x05, 0x06, 0x07, 0xff, 0xff \
    }, { \
    0x02, 0x03, 0x05, 0x06, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x02, 0x03, 0x05, 0x06, 0x07, 0xff, 0xff \
    }, { \
    0x01, 0x02, 0x03, 0x05, 0x06, 0x07, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x03, 0x05, 0x06, 0x07, 0xff \
    }, { \
    0x04, 0x05, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x04, 0x05, 0x06, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x01, 0x04, 0x05, 0x06, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x04, 0x05, 0x06, 0x07, 0xff, 0xff \
    }, { \
    0x02, 0x04, 0x05, 0x06, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x02, 0x04, 0x05, 0x06, 0x07, 0xff, 0xff \
    }, { \
    0x01, 0x02, 0x04, 0x05, 0x06, 0x07, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x04, 0x05, 0x06, 0x07, 0xff \
    }, { \
    0x03, 0x04, 0x05, 0x06, 0x07, 0xff, 0xff, 0xff \
    }, { \
    0x00, 0x03, 0x04, 0x05, 0x06, 0x07, 0xff, 0xff \
    }, { \
    0x01, 0x03, 0x04, 0x05, 0x06, 0x07, 0xff, 0xff \
    }, { \
    0x00, 0x01, 0x03, 0x04, 0x05, 0x06, 0x07, 0xff \
    }, { \
    0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0xff, 0xff \
    }, { \
    0x00, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0xff \
    }, { \
    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0xff \
    }, { \
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 \
    } \
    }

/*
    header - preprocessor macros
 */

/*
    header - type definition
 */

/*
    header - structures
 */

/*
    header - function prototypes
 */

/*
    header - C/C++ compatibility
 */

    # ifdef __cplusplus
    }
    # endif

/*
    header - inclusion guard
 */

    # endif

